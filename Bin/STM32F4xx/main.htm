<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bin\STM32F4xx\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bin\STM32F4xx\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Oct 19 00:28:14 2017
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp &rArr; Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char) &rArr; cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[96]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[2b]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC_IRQHandler</a> from lib.o(i.ADC_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream1_IRQHandler</a> from vga.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_IRQHandler</a> from lib.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">SystemInit</a> from lib.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[19]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_TIM9_IRQHandler</a> from vga.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_TIM10_IRQHandler</a> from lib.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from main.o(i.TIM2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from lib.o(i.TIM3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from lib.o(i.TIM4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from lib.o(i.TIM5_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from lib.o(i.TIM7_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from lib.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from lib.o(i.UART4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from lib.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from lib.o(i.USART2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from lib.o(i.USART3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">USART6_IRQHandler</a> from lib.o(i.USART6_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">Controller::update()</a> from controller.o(i._ZN10Controller6updateEv) referenced from controller.o(.constdata__ZTV10Controller)
 <LI><a href="#[6d]">cDevDigital::get()</a> from lib.o(i._ZN11cDevDigital3getEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[6c]">cDevDigital::set(bool)</a> from lib.o(i._ZN11cDevDigital3setEb) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[76]">cHwPort::Pin::get()</a> from lib.o(i._ZN7cHwPort3Pin3getEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[75]">cHwPort::Pin::set(bool)</a> from lib.o(i._ZN7cHwPort3Pin3setEb) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[74]">cHwPort::Pin::setMode(cHwPort::Mode)</a> from lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[70]">cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[72]">cHwPort_N::clr(unsigned)</a> from lib.o(i._ZN9cHwPort_N3clrEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[73]">cHwPort_N::get()</a> from lib.o(i._ZN9cHwPort_N3getEv) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[71]">cHwPort_N::set(unsigned)</a> from lib.o(i._ZN9cHwPort_N3setEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[6f]">cHwPort_N::setMode(unsigned, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N7setModeEjN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[6e]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV7cHwPort)
 <LI><a href="#[78]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[77]">__sti___8_main_cpp</a> from main.o(i.__sti___8_main_cpp) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[84]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[c3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[80]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[7b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[dc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[81]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[85]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; VGA::init() &rArr; RaiseVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[de]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[88]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[df]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9e]"></a>save_context</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtoscontext.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[9f]"></a>load_context</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtoscontext.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8c]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[8b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[8d]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[92]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[82]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[87]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[94]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[98]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vga.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::clr(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>LowerHSyncLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vga.o(i.LowerHSyncLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LowerHSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>LowerVSyncLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vga.o(i.LowerVSyncLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LowerVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OTG_FS_IRQHandler &rArr; cHwUSB_0::isr() &rArr; cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char) &rArr; cHwUSB_0::EndpointOUT::receive()
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>RaiseHSyncLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vga.o(i.RaiseHSyncLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RaiseHSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>RaiseVSyncLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vga.o(i.RaiseVSyncLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RaiseVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, lib.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, vga.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; RaiseVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseVSyncLine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseHSyncLine
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerVSyncLine
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerHSyncLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lib.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM7_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_CC_IRQHandler &rArr; cHwTimer_N::isr_N()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr_N()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART6_IRQHandler &rArr; cHwUART_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUART_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>enable_IRQ(unsigned char, unsigned char, int)</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, vga.o(i._Z10enable_IRQhhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enable_IRQ(unsigned char, unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
</UL>

<P><STRONG><a name="[ab]"></a>initPins(unsigned)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, vga.o(i._Z8initPinsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initPins(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
</UL>

<P><STRONG><a name="[a8]"></a>Controller::enable_IRQ(unsigned char, unsigned char, int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, main.o(i._ZN10Controller10enable_IRQEhhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Controller::enable_IRQ(unsigned char, unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6b]"></a>Controller::update()</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, controller.o(i._ZN10Controller6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Controller::update() &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controller.o(.constdata__ZTV10Controller)
</UL>
<P><STRONG><a name="[a4]"></a>Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, main.o(i._ZN10ControllerC1EN9cHwPort_N6PortIdEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char) &rArr; cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::enable_IRQ(unsigned char, unsigned char, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[ea]"></a>Controller::Controller__sub_object(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, main.o(i._ZN10ControllerC1EN9cHwPort_N6PortIdEhhh), UNUSED)

<P><STRONG><a name="[a2]"></a>cHwTimer_N::isr_N()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N5isr_NEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::isr_N()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>cDevDigital::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::get() &rArr; cHwPort::Pin::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[6c]"></a>cDevDigital::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN11cDevDigital3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::update()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseVSyncLine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseHSyncLine
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerVSyncLine
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowerHSyncLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[a7]"></a>cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::setMode(cHwPort::Mode)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[eb]"></a>cDevDigital::cDevDigital__sub_object(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb), UNUSED)

<P><STRONG><a name="[aa]"></a>VGA::init()</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, vga.o(i._ZN3VGA4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = VGA::init() &rArr; RaiseVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPins(unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_IRQ(unsigned char, unsigned char, int)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseVSyncLine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RaiseHSyncLine
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::setMode(unsigned, cHwPort::Mode)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::clr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>cList::add(cList::Item*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib.o(i._ZN5cList3addEPNS_4ItemE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>

<P><STRONG><a name="[a5]"></a>cList::Item::Item(cList*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[ec]"></a>cList::Item::Item__sub_object(cList*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_), UNUSED)

<P><STRONG><a name="[76]"></a>cHwPort::Pin::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[75]"></a>cHwPort::Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[74]"></a>cHwPort::Pin::setMode(cHwPort::Mode)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[a9]"></a>cHwPort::Pin::Pin(cHwPort&, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>

<P><STRONG><a name="[ed]"></a>cHwPort::Pin::Pin__sub_object(cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h), UNUSED)

<P><STRONG><a name="[bf]"></a>cHwPort::cHwPort__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN7cHwPortC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>

<P><STRONG><a name="[9d]"></a>cSystem::enableInterrupt()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15enableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>

<P><STRONG><a name="[9b]"></a>cSystem::disableInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem16disableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>

<P><STRONG><a name="[b1]"></a>cHwUSB_0::EndpointIN::transmitZLP()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN11transmitZLPEv))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::transmit(bool)
</UL>

<P><STRONG><a name="[ae]"></a>cHwUSB_0::EndpointIN::writeToFifo()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN11writeToFifoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwUSB_0::EndpointIN::writeToFifo()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIN&lang;unsigned char&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[bc]"></a>cHwUSB_0::EndpointIN::clrInterrupt(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN12clrInterruptEj))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[bb]"></a>cHwUSB_0::EndpointIN::getInterrupt()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN12getInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[bd]"></a>cHwUSB_0::EndpointIN::config(unsigned short, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN6configEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwUSB_0::EndpointIN::config(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b0]"></a>cHwUSB_0::EndpointIN::transmit(bool)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lib.o(i._ZN8cHwUSB_010EndpointIN8transmitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwUSB_0::EndpointIN::transmit(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIN&lang;unsigned char&rang;(T1, T1)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::transmitZLP()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b4]"></a>cHwUSB_0::EndpointOUT::receiveZLP()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT10receiveZLPEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receive()
</UL>

<P><STRONG><a name="[b9]"></a>cHwUSB_0::EndpointOUT::clrInterrupt(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT12clrInterruptEj))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b8]"></a>cHwUSB_0::EndpointOUT::getInterrupt()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT12getInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[be]"></a>cHwUSB_0::EndpointOUT::readFromFifo(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT12readFromFifoEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwUSB_0::EndpointOUT::readFromFifo(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b2]"></a>cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT6configEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char) &rArr; cHwUSB_0::EndpointOUT::receive()
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b3]"></a>cHwUSB_0::EndpointOUT::receive()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwUSB_011EndpointOUT7receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwUSB_0::EndpointOUT::receive()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIN&lang;unsigned char&rang;(T1, T1)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receiveZLP()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[b6]"></a>cHwUSB_0::clrInterrupt(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_012clrInterruptEj))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[ba]"></a>cHwUSB_0::getInInterrupt()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_014getInInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b7]"></a>cHwUSB_0::getOutInterrupt()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_015getOutInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[b5]"></a>cHwUSB_0::isInterruptPending(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_018isInterruptPendingEj))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[9c]"></a>cHwUSB_0::isr()</STRONG> (Thumb, 936 bytes, Stack size 24 bytes, lib.o(i._ZN8cHwUSB_03isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwUSB_0::isr() &rArr; cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char) &rArr; cHwUSB_0::EndpointOUT::receive()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isInterruptPending(unsigned)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::getOutInterrupt()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::getInInterrupt()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::clrInterrupt(unsigned)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receive()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::config(unsigned short, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::readFromFifo(unsigned short)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::getInterrupt()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::clrInterrupt(unsigned)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receiveZLP()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::transmit(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::config(unsigned short, unsigned char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::getInterrupt()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::clrInterrupt(unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::writeToFifo()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[72]"></a>cHwPort_N::clr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3clrEj))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[73]"></a>cHwPort_N::get()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3getEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[71]"></a>cHwPort_N::set(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3setEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[6f]"></a>cHwPort_N::setMode(unsigned, cHwPort::Mode)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib.o(i._ZN9cHwPort_N7setModeEjN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwPort_N::setMode(unsigned, cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[a6]"></a>cHwPort_N::cHwPort_N(cHwPort_N::PortId)</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::cHwPort__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[ee]"></a>cHwPort_N::cHwPort_N__sub_object(cHwPort_N::PortId)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE), UNUSED)

<P><STRONG><a name="[a3]"></a>cHwUART_N::isr()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lib.o(i._ZN9cHwUART_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwUART_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV7cHwPort)
</UL>
<P><STRONG><a name="[86]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = main &rArr; VGA::init() &rArr; RaiseVSyncLine &rArr; cDevDigital::set(bool) &rArr; cHwPort::Pin::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA::init()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::update()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[af]"></a>MIN&lang;unsigned char&rang;(T1, T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(t._Z3MINIhET_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointOUT::receive()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::transmit(bool)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::EndpointIN::writeToFifo()
</UL>

<P><STRONG><a name="[7f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[ef]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[f0]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[77]"></a>__sti___8_main_cpp</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, main.o(i.__sti___8_main_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___8_main_cpp &rArr; Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char) &rArr; cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(cHwPort_N::PortId, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
